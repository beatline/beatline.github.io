{"meta":{"title":"BeatLine安全屋","subtitle":"","description":"Tough times never last, but tough people do.","author":"模方maker","url":"http://example.com","root":"/"},"pages":[{"title":"","date":"2020-11-29T04:44:26.444Z","updated":"2020-11-29T04:44:26.444Z","comments":true,"path":"lib/three/README.html","permalink":"http://example.com/lib/three/README.html","excerpt":"","text":"JavaScript 3D library for NexT Installation If you want to use the CDN instead of clone this repo, please jump to the Step 3. Step 1 &rarr; Go to NexT dir Change dir to NexT directory. There must be layout, source, languages and other directories: 123$ cd themes/next$ ls_config.yml crowdin.yml docs gulpfile.js languages layout LICENSE.md package.json README.md scripts source Step 2 &rarr; Get module Install module to source/lib directory: 1$ git clone https://github.com/theme-next/theme-next-three source/lib/three Step 3 &rarr; Set it up Enable module in NexT _config.yml file: 12345three_waves: trueORcanvas_lines: trueORcanvas_sphere: true And, if you wants to use the CDN, then need to set: 123456vendors: ... three: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1/three.min.js three_waves: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@latest/three-waves.min.js canvas_lines: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@latest/canvas_lines.min.js canvas_sphere: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@latest/canvas_sphere.min.js Update 12$ cd themes/next/source/lib/three$ git pull"},{"title":"","date":"2020-11-29T04:44:26.446Z","updated":"2020-11-29T04:44:26.446Z","comments":true,"path":"lib/three/gulpfile.js","permalink":"http://example.com/lib/three/gulpfile.js","excerpt":"","text":"const fs = require('fs') const del = require('del') const gulp = require('gulp') const concat = require('gulp-concat') const uglify = require('gulp-uglify') gulp.task('clean', async () => { del(['*.min.js', '!three.min.js']) }) gulp.task('scripts', async () => { const sourceFiles = fs.readdirSync('src') sourceFiles.forEach(file => { const fileName = file.split('.')[0] return gulp.src([`src/${fileName}.js`, 'lib/*.js']) .pipe(concat(`${fileName}.min.js`)) .pipe(uglify()) .pipe(gulp.dest('./')) }) }) gulp.task('default', gulp.series('clean', 'scripts'))"},{"title":"","date":"2020-11-29T04:44:26.449Z","updated":"2020-11-29T04:44:26.449Z","comments":true,"path":"lib/three/package.json","permalink":"http://example.com/lib/three/package.json","excerpt":"","text":"{\"name\":\"theme-next-three\",\"version\":\"1.0.0\",\"main\":\"index.js\",\"repository\":\"git@github.com:theme-next/theme-next-three.git\",\"author\":\"Raincal \",\"license\":\"MIT\",\"scripts\":{\"build\":\"gulp\"},\"dependencies\":{\"del\":\"^5.1.0\",\"gulp\":\"^4.0.2\",\"gulp-concat\":\"^2.6.1\",\"gulp-uglify\":\"^3.0.2\"}}"},{"title":"","date":"2020-11-29T04:44:26.449Z","updated":"2020-11-29T04:44:26.449Z","comments":true,"path":"lib/three/renovate.json","permalink":"http://example.com/lib/three/renovate.json","excerpt":"","text":"{\"extends\":[\"config:base\"]}"},{"title":"","date":"2020-11-29T04:44:26.450Z","updated":"2020-11-29T04:44:26.450Z","comments":true,"path":"lib/three/src/canvas_lines.js","permalink":"http://example.com/lib/three/src/canvas_lines.js","excerpt":"","text":"/** * Created by Tang on 2017/4/15. */ $(function () { var mouseX = 0, mouseY = 0, windowHalfX = window.innerWidth / 2, windowHalfY = window.innerHeight / 2, SEPARATION = 200, AMOUNTX = 10, AMOUNTY = 10, camera, scene, renderer; init(); animate(); function init() { var container, separation = 100, amountX = 50, amountY = 50, particles, particle; container = document.createElement('div'); // 设置css container.style.position = \"fixed\"; container.style.top = \"0px\"; container.style.left = \"0px\"; container.style.zIndex = \"-1\"; container.style.opacity = \"0.5\"; document.body.appendChild(container); camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000); camera.position.z = 100; scene = new THREE.Scene(); renderer = new THREE.CanvasRenderer({ alpha: true }); renderer.setPixelRatio(window.devicePixelRatio); renderer.setSize(window.innerWidth, window.innerHeight); container.appendChild(renderer.domElement); // particles var PI2 = Math.PI * 2; var material = new THREE.SpriteCanvasMaterial({ color: 10263708, program: function (context) { context.beginPath(); context.arc(0, 0, 0.5, 0, PI2, true); context.fill(); } }); var geometry = new THREE.Geometry(); for (var i = 0; i < 100; i++) { particle = new THREE.Sprite(material); particle.position.x = Math.random() * 2 - 1; particle.position.y = Math.random() * 2 - 1; particle.position.z = Math.random() * 2 - 1; particle.position.normalize(); particle.position.multiplyScalar(Math.random() * 10 + 450); particle.scale.x = particle.scale.y = 10; scene.add(particle); geometry.vertices.push(particle.position); } // lines var line = new THREE.Line(geometry, new THREE.LineBasicMaterial({ color: 10263708, opacity: 0.5 })); scene.add(line); document.addEventListener('mousemove', onDocumentMouseMove, false); document.addEventListener('touchstart', onDocumentTouchStart, false); document.addEventListener('touchmove', onDocumentTouchMove, false); // window.addEventListener('resize', onWindowResize, false); } function onWindowResize() { windowHalfX = window.innerWidth / 2; windowHalfY = window.innerHeight / 2; camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); renderer.setSize(window.innerWidth, window.innerHeight); } // function onDocumentMouseMove(event) { mouseX = event.clientX - windowHalfX; mouseY = event.clientY - windowHalfY; } function onDocumentTouchStart(event) { if (event.touches.length > 1) { //event.preventDefault(); mouseX = event.touches[0].pageX - windowHalfX; //mouseY = event.touches[ 0 ].pageY - windowHalfY; } } function onDocumentTouchMove(event) { if (event.touches.length == 1) { //event.preventDefault(); mouseX = event.touches[0].pageX - windowHalfX; //mouseY = event.touches[ 0 ].pageY - windowHalfY; } } // function animate() { requestAnimationFrame(animate); render(); } function render() { camera.position.x += (mouseX - camera.position.x) * .05; camera.position.y += (-mouseY + 200 - camera.position.y) * .05; camera.lookAt(scene.position); renderer.render(scene, camera); } })"},{"title":"","date":"2020-11-29T04:44:26.451Z","updated":"2020-11-29T04:44:26.451Z","comments":true,"path":"lib/three/src/canvas_sphere.js","permalink":"http://example.com/lib/three/src/canvas_sphere.js","excerpt":"","text":"/** * Created by Tang on 2017/4/15. */ $(function () { var SCREEN_WIDTH = window.innerWidth, SCREEN_HEIGHT = window.innerHeight, mouseX = 0, mouseY = 0, windowHalfX = window.innerWidth / 2, windowHalfY = window.innerHeight / 2, SEPARATION = 200, AMOUNTX = 10, AMOUNTY = 10, camera, scene, renderer; init(); animate(); function init() { var container, separation = 100, amountX = 50, amountY = 50, particles, particle; container = document.createElement('div'); // 设置css container.style.position = \"fixed\"; container.style.top = \"0px\"; container.style.left = \"0px\"; container.style.zIndex = \"-1\"; container.style.opacity = \"0.5\"; document.body.appendChild(container); camera = new THREE.PerspectiveCamera(75, SCREEN_WIDTH / SCREEN_HEIGHT, 1, 10000); camera.position.z = 1000; scene = new THREE.Scene(); renderer = new THREE.CanvasRenderer({ alpha: true }); renderer.setPixelRatio(window.devicePixelRatio); renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT); container.appendChild(renderer.domElement); // particles var PI2 = Math.PI * 2; var material = new THREE.SpriteCanvasMaterial({ color: 10263708, program: function (context) { context.beginPath(); context.arc(0, 0, 0.5, 0, PI2, true); context.fill(); } }); for (var i = 0; i < 1000; i++) { particle = new THREE.Sprite(material); particle.position.x = Math.random() * 2 - 1; particle.position.y = Math.random() * 2 - 1; particle.position.z = Math.random() * 2 - 1; particle.position.normalize(); particle.position.multiplyScalar(Math.random() * 10 + 450); particle.scale.multiplyScalar(2); scene.add(particle); } // lines for (var i = 0; i < 300; i++) { var geometry = new THREE.Geometry(); var vertex = new THREE.Vector3(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2 - 1); vertex.normalize(); vertex.multiplyScalar(450); geometry.vertices.push(vertex); var vertex2 = vertex.clone(); vertex2.multiplyScalar(Math.random() * 0.3 + 1); geometry.vertices.push(vertex2); var line = new THREE.Line(geometry, new THREE.LineBasicMaterial({ color: 10263708, opacity: Math.random() })); scene.add(line); } document.addEventListener('mousemove', onDocumentMouseMove, false); document.addEventListener('touchstart', onDocumentTouchStart, false); document.addEventListener('touchmove', onDocumentTouchMove, false); // window.addEventListener('resize', onWindowResize, false); } function onWindowResize() { windowHalfX = window.innerWidth / 2; windowHalfY = window.innerHeight / 2; camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); renderer.setSize(window.innerWidth, window.innerHeight); } // function onDocumentMouseMove(event) { mouseX = event.clientX - windowHalfX; mouseY = event.clientY - windowHalfY; } function onDocumentTouchStart(event) { if (event.touches.length > 1) { //event.preventDefault(); mouseX = event.touches[0].pageX - windowHalfX; //mouseY = event.touches[ 0 ].pageY - windowHalfY; } } function onDocumentTouchMove(event) { if (event.touches.length == 1) { //event.preventDefault(); mouseX = event.touches[0].pageX - windowHalfX; //mouseY = event.touches[ 0 ].pageY - windowHalfY; } } // function animate() { requestAnimationFrame(animate); render(); } function render() { camera.position.x += (mouseX - camera.position.x) * .05; camera.position.y += (-mouseY + 200 - camera.position.y) * .05; camera.lookAt(scene.position); renderer.render(scene, camera); } })"},{"title":"","date":"2020-11-29T04:44:26.452Z","updated":"2020-11-29T04:44:26.452Z","comments":true,"path":"lib/three/src/three-waves.js","permalink":"http://example.com/lib/three/src/three-waves.js","excerpt":"","text":"$(function () { var SEPARATION = 100, AMOUNTX = 50, AMOUNTY = 50; var container; var camera, scene, renderer; var particles, particle, count = 0; var mouseX = 0, mouseY = 0; var windowHalfX = window.innerWidth / 2; var windowHalfY = window.innerHeight / 2; init(); animate(); function init() { container = document.createElement(\"div\"); container.style.position = \"fixed\"; container.style.top = \"0px\"; container.style.left = \"0px\"; container.style.zIndex = \"-1\"; container.style.opacity = \"0.5\"; document.body.appendChild(container); camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000); camera.position.z = 1000; scene = new THREE.Scene(); particles = new Array(); var PI2 = Math.PI * 2; var material = new THREE.SpriteCanvasMaterial({ color: 10263708, program: function (context) { context.beginPath(); context.arc(0, 0, 0.5, 0, PI2, true); context.fill() } }); var i = 0; for (var ix = 0; ix < AMOUNTX; ix++) { for (var iy = 0; iy < AMOUNTY; iy++) { particle = particles[i++] = new THREE.Sprite(material); particle.position.x = ix * SEPARATION - ((AMOUNTX * SEPARATION) / 2); particle.position.z = iy * SEPARATION - ((AMOUNTY * SEPARATION) / 2); scene.add(particle) } } renderer = new THREE.CanvasRenderer({ alpha: true }); renderer.setPixelRatio(window.devicePixelRatio); renderer.setSize(window.innerWidth, window.innerHeight); container.appendChild(renderer.domElement); document.addEventListener(\"mousemove\", onDocumentMouseMove, false); window.addEventListener(\"resize\", onWindowResize, false) } function onWindowResize() { windowHalfX = window.innerWidth / 2; windowHalfY = window.innerHeight / 2; camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); renderer.setSize(window.innerWidth, window.innerHeight) } function onDocumentMouseMove(event) { mouseX = event.clientX - windowHalfX } function animate() { requestAnimationFrame(animate); render() } function render() { camera.position.x += (mouseX - camera.position.x) * 0.05; camera.position.y = 362.05; camera.lookAt({ x: scene.position.x, y: window.innerHeight / 3, z: scene.position.z }); var i = 0; for (var ix = 0; ix < AMOUNTX; ix++) { for (var iy = 0; iy < AMOUNTY; iy++) { particle = particles[i++]; particle.position.y = (Math.sin((ix + count) * 0.3) * 50) + (Math.sin((iy + count) * 0.5) * 50); particle.scale.x = particle.scale.y = (Math.sin((ix + count) * 0.3) + 1) * 4 + (Math.sin((iy + count) * 0.5) + 1) * 4 } } renderer.render(scene, camera); count += 0.1 } });"},{"title":"","date":"2020-11-29T04:44:26.445Z","updated":"2020-11-29T04:44:26.445Z","comments":true,"path":"lib/three/canvas_lines.min.js","permalink":"http://example.com/lib/three/canvas_lines.min.js","excerpt":"","text":"THREE.SpriteCanvasMaterial=function(e){THREE.Material.call(this),this.type=\"SpriteCanvasMaterial\",this.color=new THREE.Color(16777215),this.program=function(e,t){},this.setValues(e)},THREE.SpriteCanvasMaterial.prototype=Object.create(THREE.Material.prototype),THREE.SpriteCanvasMaterial.prototype.constructor=THREE.SpriteCanvasMaterial,THREE.SpriteCanvasMaterial.prototype.clone=function(){var e=new THREE.SpriteCanvasMaterial;return e.copy(this),e.color.copy(this.color),e.program=this.program,e},THREE.CanvasRenderer=function(e){console.log(\"THREE.CanvasRenderer\",THREE.REVISION),e=e||{};var s,l,c,p,E,d,h,f,u,m,v,x,R,y,T,w,H,g,S,M=this,b=new THREE.Projector,r=void 0!==e.canvas?e.canvas:document.createElement(\"canvas\"),C=r.width,z=r.height,V=Math.floor(C/2),j=Math.floor(z/2),L=0,O=0,B=C,W=z,n=1,P=r.getContext(\"2d\",{alpha:!0===e.alpha}),i=new THREE.Color(0),o=!0===e.alpha?0:1,a=1,k=0,N=null,F=null,A=null,I=null,D=null,t=[],G=(new THREE.RenderableVertex,new THREE.RenderableVertex,new THREE.Color),U=(new THREE.Color,new THREE.Color,new THREE.Color,new THREE.Color,new THREE.Color),q=new THREE.Color,X=new THREE.Color,J={},Y=new THREE.Box2,$=new THREE.Box2,K=new THREE.Box2,Q=new THREE.Color,Z=new THREE.Color,_=new THREE.Color,ee=new THREE.Vector3,te=new THREE.Vector3,ie=new THREE.Vector3,re=new THREE.Matrix3;function ne(e,t,i){de(i.opacity),he(i.blending);var r=t.scale.x*V,n=t.scale.y*j,o=.5*Math.sqrt(r*r+n*n);if(K.min.set(e.x-o,e.y-o),K.max.set(e.x+o,e.y+o),i instanceof THREE.SpriteMaterial){var a=i.map;if(null!==a){var s=J[a.id];if(void 0!==s&&s.version===a.version||(s=ce(a),J[a.id]=s),void 0!==s.canvas){xe(s.canvas);var l=a.image,c=l.width*a.offset.x,p=l.height*a.offset.y,E=l.width*a.repeat.x,d=l.height*a.repeat.y,h=r/E,f=n/d;P.save(),P.translate(e.x,e.y),0!==i.rotation&&P.rotate(i.rotation),P.translate(-r/2,-n/2),P.scale(h,f),P.translate(-c,-p),P.fillRect(c,p,E,d),P.restore()}}else xe(i.color.getStyle()),P.save(),P.translate(e.x,e.y),0!==i.rotation&&P.rotate(i.rotation),P.scale(r,-n),P.fillRect(-.5,-.5,1,1),P.restore()}else i instanceof THREE.SpriteCanvasMaterial&&(ve(i.color.getStyle()),xe(i.color.getStyle()),P.save(),P.translate(e.x,e.y),0!==i.rotation&&P.rotate(i.rotation),P.scale(r,n),i.program(P),P.restore())}function oe(e,t,i,r){if(de(r.opacity),he(r.blending),P.beginPath(),P.moveTo(e.positionScreen.x,e.positionScreen.y),P.lineTo(t.positionScreen.x,t.positionScreen.y),r instanceof THREE.LineBasicMaterial){if(fe(r.linewidth),ue(r.linecap),me(r.linejoin),r.vertexColors!==THREE.VertexColors)ve(r.color.getStyle());else{var n=i.vertexColors[0].getStyle(),o=i.vertexColors[1].getStyle();if(n===o)ve(n);else{try{var a=P.createLinearGradient(e.positionScreen.x,e.positionScreen.y,t.positionScreen.x,t.positionScreen.y);a.addColorStop(0,n),a.addColorStop(1,o)}catch(e){a=n}ve(a)}}P.stroke(),K.expandByScalar(2*r.linewidth)}else r instanceof THREE.LineDashedMaterial&&(fe(r.linewidth),ue(r.linecap),me(r.linejoin),ve(r.color.getStyle()),Re([r.dashSize,r.gapSize]),P.stroke(),K.expandByScalar(2*r.linewidth),Re([]))}function ae(e,t,i,r,n,o,a,s){if(M.info.render.vertices+=3,M.info.render.faces++,de(s.opacity),he(s.blending),h=e.positionScreen.x,f=e.positionScreen.y,u=t.positionScreen.x,m=t.positionScreen.y,v=i.positionScreen.x,x=i.positionScreen.y,function(e,t,i,r,n,o){P.beginPath(),P.moveTo(e,t),P.lineTo(i,r),P.lineTo(n,o),P.closePath()}(h,f,u,m,v,x),(s instanceof THREE.MeshLambertMaterial||s instanceof THREE.MeshPhongMaterial)&&null===s.map)U.copy(s.color),q.copy(s.emissive),s.vertexColors===THREE.FaceColors&&U.multiply(a.color),G.copy(Q),te.copy(e.positionWorld).add(t.positionWorld).add(i.positionWorld).divideScalar(3),function(e,t,i){for(var r=0,n=c.length;r"},{"title":"","date":"2020-11-29T04:44:26.446Z","updated":"2020-11-29T04:44:26.446Z","comments":true,"path":"lib/three/canvas_sphere.min.js","permalink":"http://example.com/lib/three/canvas_sphere.min.js","excerpt":"","text":"THREE.SpriteCanvasMaterial=function(e){THREE.Material.call(this),this.type=\"SpriteCanvasMaterial\",this.color=new THREE.Color(16777215),this.program=function(e,t){},this.setValues(e)},THREE.SpriteCanvasMaterial.prototype=Object.create(THREE.Material.prototype),THREE.SpriteCanvasMaterial.prototype.constructor=THREE.SpriteCanvasMaterial,THREE.SpriteCanvasMaterial.prototype.clone=function(){var e=new THREE.SpriteCanvasMaterial;return e.copy(this),e.color.copy(this.color),e.program=this.program,e},THREE.CanvasRenderer=function(e){console.log(\"THREE.CanvasRenderer\",THREE.REVISION),e=e||{};var s,l,c,p,E,d,h,f,u,m,v,R,x,y,T,w,H,g,S,M=this,b=new THREE.Projector,i=void 0!==e.canvas?e.canvas:document.createElement(\"canvas\"),C=i.width,z=i.height,V=Math.floor(C/2),j=Math.floor(z/2),L=0,O=0,B=C,W=z,n=1,P=i.getContext(\"2d\",{alpha:!0===e.alpha}),r=new THREE.Color(0),o=!0===e.alpha?0:1,a=1,k=0,N=null,F=null,A=null,I=null,D=null,t=[],G=(new THREE.RenderableVertex,new THREE.RenderableVertex,new THREE.Color),U=(new THREE.Color,new THREE.Color,new THREE.Color,new THREE.Color,new THREE.Color),q=new THREE.Color,X=new THREE.Color,J={},Y=new THREE.Box2,$=new THREE.Box2,K=new THREE.Box2,Q=new THREE.Color,Z=new THREE.Color,_=new THREE.Color,ee=new THREE.Vector3,te=new THREE.Vector3,re=new THREE.Vector3,ie=new THREE.Matrix3;function ne(e,t,r){de(r.opacity),he(r.blending);var i=t.scale.x*V,n=t.scale.y*j,o=.5*Math.sqrt(i*i+n*n);if(K.min.set(e.x-o,e.y-o),K.max.set(e.x+o,e.y+o),r instanceof THREE.SpriteMaterial){var a=r.map;if(null!==a){var s=J[a.id];if(void 0!==s&&s.version===a.version||(s=ce(a),J[a.id]=s),void 0!==s.canvas){Re(s.canvas);var l=a.image,c=l.width*a.offset.x,p=l.height*a.offset.y,E=l.width*a.repeat.x,d=l.height*a.repeat.y,h=i/E,f=n/d;P.save(),P.translate(e.x,e.y),0!==r.rotation&&P.rotate(r.rotation),P.translate(-i/2,-n/2),P.scale(h,f),P.translate(-c,-p),P.fillRect(c,p,E,d),P.restore()}}else Re(r.color.getStyle()),P.save(),P.translate(e.x,e.y),0!==r.rotation&&P.rotate(r.rotation),P.scale(i,-n),P.fillRect(-.5,-.5,1,1),P.restore()}else r instanceof THREE.SpriteCanvasMaterial&&(ve(r.color.getStyle()),Re(r.color.getStyle()),P.save(),P.translate(e.x,e.y),0!==r.rotation&&P.rotate(r.rotation),P.scale(i,n),r.program(P),P.restore())}function oe(e,t,r,i){if(de(i.opacity),he(i.blending),P.beginPath(),P.moveTo(e.positionScreen.x,e.positionScreen.y),P.lineTo(t.positionScreen.x,t.positionScreen.y),i instanceof THREE.LineBasicMaterial){if(fe(i.linewidth),ue(i.linecap),me(i.linejoin),i.vertexColors!==THREE.VertexColors)ve(i.color.getStyle());else{var n=r.vertexColors[0].getStyle(),o=r.vertexColors[1].getStyle();if(n===o)ve(n);else{try{var a=P.createLinearGradient(e.positionScreen.x,e.positionScreen.y,t.positionScreen.x,t.positionScreen.y);a.addColorStop(0,n),a.addColorStop(1,o)}catch(e){a=n}ve(a)}}P.stroke(),K.expandByScalar(2*i.linewidth)}else i instanceof THREE.LineDashedMaterial&&(fe(i.linewidth),ue(i.linecap),me(i.linejoin),ve(i.color.getStyle()),xe([i.dashSize,i.gapSize]),P.stroke(),K.expandByScalar(2*i.linewidth),xe([]))}function ae(e,t,r,i,n,o,a,s){if(M.info.render.vertices+=3,M.info.render.faces++,de(s.opacity),he(s.blending),h=e.positionScreen.x,f=e.positionScreen.y,u=t.positionScreen.x,m=t.positionScreen.y,v=r.positionScreen.x,R=r.positionScreen.y,function(e,t,r,i,n,o){P.beginPath(),P.moveTo(e,t),P.lineTo(r,i),P.lineTo(n,o),P.closePath()}(h,f,u,m,v,R),(s instanceof THREE.MeshLambertMaterial||s instanceof THREE.MeshPhongMaterial)&&null===s.map)U.copy(s.color),q.copy(s.emissive),s.vertexColors===THREE.FaceColors&&U.multiply(a.color),G.copy(Q),te.copy(e.positionWorld).add(t.positionWorld).add(r.positionWorld).divideScalar(3),function(e,t,r){for(var i=0,n=c.length;i"},{"title":"","date":"2020-11-29T04:44:26.452Z","updated":"2020-11-29T04:44:26.452Z","comments":true,"path":"lib/three/three-waves.min.js","permalink":"http://example.com/lib/three/three-waves.min.js","excerpt":"","text":"THREE.SpriteCanvasMaterial=function(e){THREE.Material.call(this),this.type=\"SpriteCanvasMaterial\",this.color=new THREE.Color(16777215),this.program=function(e,t){},this.setValues(e)},THREE.SpriteCanvasMaterial.prototype=Object.create(THREE.Material.prototype),THREE.SpriteCanvasMaterial.prototype.constructor=THREE.SpriteCanvasMaterial,THREE.SpriteCanvasMaterial.prototype.clone=function(){var e=new THREE.SpriteCanvasMaterial;return e.copy(this),e.color.copy(this.color),e.program=this.program,e},THREE.CanvasRenderer=function(e){console.log(\"THREE.CanvasRenderer\",THREE.REVISION),e=e||{};var s,l,c,p,E,d,f,h,u,m,v,x,R,y,T,w,H,g,S,M=this,b=new THREE.Projector,i=void 0!==e.canvas?e.canvas:document.createElement(\"canvas\"),C=i.width,z=i.height,V=Math.floor(C/2),j=Math.floor(z/2),L=0,O=0,B=C,W=z,n=1,P=i.getContext(\"2d\",{alpha:!0===e.alpha}),r=new THREE.Color(0),o=!0===e.alpha?0:1,a=1,k=0,N=null,F=null,A=null,I=null,D=null,t=[],G=(new THREE.RenderableVertex,new THREE.RenderableVertex,new THREE.Color),U=(new THREE.Color,new THREE.Color,new THREE.Color,new THREE.Color,new THREE.Color),q=new THREE.Color,J=new THREE.Color,X={},$=new THREE.Box2,K=new THREE.Box2,Q=new THREE.Box2,Y=new THREE.Color,Z=new THREE.Color,_=new THREE.Color,ee=new THREE.Vector3,te=new THREE.Vector3,re=new THREE.Vector3,ie=new THREE.Matrix3;function ne(e,t,r){de(r.opacity),fe(r.blending);var i=t.scale.x*V,n=t.scale.y*j,o=.5*Math.sqrt(i*i+n*n);if(Q.min.set(e.x-o,e.y-o),Q.max.set(e.x+o,e.y+o),r instanceof THREE.SpriteMaterial){var a=r.map;if(null!==a){var s=X[a.id];if(void 0!==s&&s.version===a.version||(s=ce(a),X[a.id]=s),void 0!==s.canvas){xe(s.canvas);var l=a.image,c=l.width*a.offset.x,p=l.height*a.offset.y,E=l.width*a.repeat.x,d=l.height*a.repeat.y,f=i/E,h=n/d;P.save(),P.translate(e.x,e.y),0!==r.rotation&&P.rotate(r.rotation),P.translate(-i/2,-n/2),P.scale(f,h),P.translate(-c,-p),P.fillRect(c,p,E,d),P.restore()}}else xe(r.color.getStyle()),P.save(),P.translate(e.x,e.y),0!==r.rotation&&P.rotate(r.rotation),P.scale(i,-n),P.fillRect(-.5,-.5,1,1),P.restore()}else r instanceof THREE.SpriteCanvasMaterial&&(ve(r.color.getStyle()),xe(r.color.getStyle()),P.save(),P.translate(e.x,e.y),0!==r.rotation&&P.rotate(r.rotation),P.scale(i,n),r.program(P),P.restore())}function oe(e,t,r,i){if(de(i.opacity),fe(i.blending),P.beginPath(),P.moveTo(e.positionScreen.x,e.positionScreen.y),P.lineTo(t.positionScreen.x,t.positionScreen.y),i instanceof THREE.LineBasicMaterial){if(he(i.linewidth),ue(i.linecap),me(i.linejoin),i.vertexColors!==THREE.VertexColors)ve(i.color.getStyle());else{var n=r.vertexColors[0].getStyle(),o=r.vertexColors[1].getStyle();if(n===o)ve(n);else{try{var a=P.createLinearGradient(e.positionScreen.x,e.positionScreen.y,t.positionScreen.x,t.positionScreen.y);a.addColorStop(0,n),a.addColorStop(1,o)}catch(e){a=n}ve(a)}}P.stroke(),Q.expandByScalar(2*i.linewidth)}else i instanceof THREE.LineDashedMaterial&&(he(i.linewidth),ue(i.linecap),me(i.linejoin),ve(i.color.getStyle()),Re([i.dashSize,i.gapSize]),P.stroke(),Q.expandByScalar(2*i.linewidth),Re([]))}function ae(e,t,r,i,n,o,a,s){if(M.info.render.vertices+=3,M.info.render.faces++,de(s.opacity),fe(s.blending),f=e.positionScreen.x,h=e.positionScreen.y,u=t.positionScreen.x,m=t.positionScreen.y,v=r.positionScreen.x,x=r.positionScreen.y,function(e,t,r,i,n,o){P.beginPath(),P.moveTo(e,t),P.lineTo(r,i),P.lineTo(n,o),P.closePath()}(f,h,u,m,v,x),(s instanceof THREE.MeshLambertMaterial||s instanceof THREE.MeshPhongMaterial)&&null===s.map)U.copy(s.color),q.copy(s.emissive),s.vertexColors===THREE.FaceColors&&U.multiply(a.color),G.copy(Y),te.copy(e.positionWorld).add(t.positionWorld).add(r.positionWorld).divideScalar(3),function(e,t,r){for(var i=0,n=c.length;i"},{"title":"","date":"2020-11-29T04:44:26.448Z","updated":"2020-11-29T04:44:26.448Z","comments":true,"path":"lib/three/lib/Projector.js","permalink":"http://example.com/lib/three/lib/Projector.js","excerpt":"","text":"/** * @author mrdoob / http://mrdoob.com/ * @author supereggbert / http://www.paulbrunt.co.uk/ * @author julianwa / https://github.com/julianwa */ THREE.RenderableObject = function () { this.id = 0; this.object = null; this.z = 0; this.renderOrder = 0; }; // THREE.RenderableFace = function () { this.id = 0; this.v1 = new THREE.RenderableVertex(); this.v2 = new THREE.RenderableVertex(); this.v3 = new THREE.RenderableVertex(); this.normalModel = new THREE.Vector3(); this.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ]; this.vertexNormalsLength = 0; this.color = new THREE.Color(); this.material = null; this.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ]; this.z = 0; this.renderOrder = 0; }; // THREE.RenderableVertex = function () { this.position = new THREE.Vector3(); this.positionWorld = new THREE.Vector3(); this.positionScreen = new THREE.Vector4(); this.visible = true; }; THREE.RenderableVertex.prototype.copy = function ( vertex ) { this.positionWorld.copy( vertex.positionWorld ); this.positionScreen.copy( vertex.positionScreen ); }; // THREE.RenderableLine = function () { this.id = 0; this.v1 = new THREE.RenderableVertex(); this.v2 = new THREE.RenderableVertex(); this.vertexColors = [ new THREE.Color(), new THREE.Color() ]; this.material = null; this.z = 0; this.renderOrder = 0; }; // THREE.RenderableSprite = function () { this.id = 0; this.object = null; this.x = 0; this.y = 0; this.z = 0; this.rotation = 0; this.scale = new THREE.Vector2(); this.material = null; this.renderOrder = 0; }; // THREE.Projector = function () { var _object, _objectCount, _objectPool = [], _objectPoolLength = 0, _vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0, _face, _faceCount, _facePool = [], _facePoolLength = 0, _line, _lineCount, _linePool = [], _linePoolLength = 0, _sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0, _renderData = { objects: [], lights: [], elements: [] }, _vector3 = new THREE.Vector3(), _vector4 = new THREE.Vector4(), _clipBox = new THREE.Box3( new THREE.Vector3( - 1, - 1, - 1 ), new THREE.Vector3( 1, 1, 1 ) ), _boundingBox = new THREE.Box3(), _points3 = new Array( 3 ), _points4 = new Array( 4 ), _viewMatrix = new THREE.Matrix4(), _viewProjectionMatrix = new THREE.Matrix4(), _modelMatrix, _modelViewProjectionMatrix = new THREE.Matrix4(), _normalMatrix = new THREE.Matrix3(), _frustum = new THREE.Frustum(), _clippedVertex1PositionScreen = new THREE.Vector4(), _clippedVertex2PositionScreen = new THREE.Vector4(); // this.projectVector = function ( vector, camera ) { console.warn( 'THREE.Projector: .projectVector() is now vector.project().' ); vector.project( camera ); }; this.unprojectVector = function ( vector, camera ) { console.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' ); vector.unproject( camera ); }; this.pickingRay = function ( vector, camera ) { console.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' ); }; // var RenderList = function () { var normals = []; var uvs = []; var object = null; var material = null; var normalMatrix = new THREE.Matrix3(); function setObject( value ) { object = value; material = object.material; normalMatrix.getNormalMatrix( object.matrixWorld ); normals.length = 0; uvs.length = 0; } function projectVertex( vertex ) { var position = vertex.position; var positionWorld = vertex.positionWorld; var positionScreen = vertex.positionScreen; positionWorld.copy( position ).applyMatrix4( _modelMatrix ); positionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix ); var invW = 1 / positionScreen.w; positionScreen.x *= invW; positionScreen.y *= invW; positionScreen.z *= invW; vertex.visible = positionScreen.x >= - 1 && positionScreen.x = - 1 && positionScreen.y = - 1 && positionScreen.z"},{"title":"","date":"2020-11-29T04:44:26.447Z","updated":"2020-11-29T04:44:26.447Z","comments":true,"path":"lib/three/lib/CanvasRenderer.js","permalink":"http://example.com/lib/three/lib/CanvasRenderer.js","excerpt":"","text":"/** * @author mrdoob / http://mrdoob.com/ */ THREE.SpriteCanvasMaterial = function ( parameters ) { THREE.Material.call( this ); this.type = 'SpriteCanvasMaterial'; this.color = new THREE.Color( 0xffffff ); this.program = function ( context, color ) {}; this.setValues( parameters ); }; THREE.SpriteCanvasMaterial.prototype = Object.create( THREE.Material.prototype ); THREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial; THREE.SpriteCanvasMaterial.prototype.clone = function () { var material = new THREE.SpriteCanvasMaterial(); material.copy( this ); material.color.copy( this.color ); material.program = this.program; return material; }; // THREE.CanvasRenderer = function ( parameters ) { console.log( 'THREE.CanvasRenderer', THREE.REVISION ); parameters = parameters || {}; var _this = this, _renderData, _elements, _lights, _projector = new THREE.Projector(), _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement( 'canvas' ), _canvasWidth = _canvas.width, _canvasHeight = _canvas.height, _canvasWidthHalf = Math.floor( _canvasWidth / 2 ), _canvasHeightHalf = Math.floor( _canvasHeight / 2 ), _viewportX = 0, _viewportY = 0, _viewportWidth = _canvasWidth, _viewportHeight = _canvasHeight, _pixelRatio = 1, _context = _canvas.getContext( '2d', { alpha: parameters.alpha === true } ), _clearColor = new THREE.Color( 0x000000 ), _clearAlpha = parameters.alpha === true ? 0 : 1, _contextGlobalAlpha = 1, _contextGlobalCompositeOperation = 0, _contextStrokeStyle = null, _contextFillStyle = null, _contextLineWidth = null, _contextLineCap = null, _contextLineJoin = null, _contextLineDash = [], _camera, _v1, _v2, _v3, _v4, _v5 = new THREE.RenderableVertex(), _v6 = new THREE.RenderableVertex(), _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y, _v5x, _v5y, _v6x, _v6y, _color = new THREE.Color(), _color1 = new THREE.Color(), _color2 = new THREE.Color(), _color3 = new THREE.Color(), _color4 = new THREE.Color(), _diffuseColor = new THREE.Color(), _emissiveColor = new THREE.Color(), _lightColor = new THREE.Color(), _patterns = {}, _image, _uvs, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, _clipBox = new THREE.Box2(), _clearBox = new THREE.Box2(), _elemBox = new THREE.Box2(), _ambientLight = new THREE.Color(), _directionalLights = new THREE.Color(), _pointLights = new THREE.Color(), _vector3 = new THREE.Vector3(), // Needed for PointLight _centroid = new THREE.Vector3(), _normal = new THREE.Vector3(), _normalViewMatrix = new THREE.Matrix3(); /* TODO _canvas.mozImageSmoothingEnabled = false; _canvas.webkitImageSmoothingEnabled = false; _canvas.msImageSmoothingEnabled = false; _canvas.imageSmoothingEnabled = false; */ // dash+gap fallbacks for Firefox and everything else if ( _context.setLineDash === undefined ) { _context.setLineDash = function () {}; } this.domElement = _canvas; this.autoClear = true; this.sortObjects = true; this.sortElements = true; this.info = { render: { vertices: 0, faces: 0 } }; // WebGLRenderer compatibility this.supportsVertexTextures = function () {}; this.setFaceCulling = function () {}; // API this.getContext = function () { return _context; }; this.getContextAttributes = function () { return _context.getContextAttributes(); }; this.getPixelRatio = function () { return _pixelRatio; }; this.setPixelRatio = function ( value ) { if ( value !== undefined ) _pixelRatio = value; }; this.setSize = function ( width, height, updateStyle ) { _canvasWidth = width * _pixelRatio; _canvasHeight = height * _pixelRatio; _canvas.width = _canvasWidth; _canvas.height = _canvasHeight; _canvasWidthHalf = Math.floor( _canvasWidth / 2 ); _canvasHeightHalf = Math.floor( _canvasHeight / 2 ); if ( updateStyle !== false ) { _canvas.style.width = width + 'px'; _canvas.style.height = height + 'px'; } _clipBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf ); _clipBox.max.set( _canvasWidthHalf, _canvasHeightHalf ); _clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf ); _clearBox.max.set( _canvasWidthHalf, _canvasHeightHalf ); _contextGlobalAlpha = 1; _contextGlobalCompositeOperation = 0; _contextStrokeStyle = null; _contextFillStyle = null; _contextLineWidth = null; _contextLineCap = null; _contextLineJoin = null; this.setViewport( 0, 0, width, height ); }; this.setViewport = function ( x, y, width, height ) { _viewportX = x * _pixelRatio; _viewportY = y * _pixelRatio; _viewportWidth = width * _pixelRatio; _viewportHeight = height * _pixelRatio; }; this.setScissor = function () {}; this.setScissorTest = function () {}; this.setClearColor = function ( color, alpha ) { _clearColor.set( color ); _clearAlpha = alpha !== undefined ? alpha : 1; _clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf ); _clearBox.max.set( _canvasWidthHalf, _canvasHeightHalf ); }; this.setClearColorHex = function ( hex, alpha ) { console.warn( 'THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.' ); this.setClearColor( hex, alpha ); }; this.getClearColor = function () { return _clearColor; }; this.getClearAlpha = function () { return _clearAlpha; }; this.getMaxAnisotropy = function () { return 0; }; this.clear = function () { if ( _clearBox.isEmpty() === false ) { _clearBox.intersect( _clipBox ); _clearBox.expandByScalar( 2 ); _clearBox.min.x = _clearBox.min.x + _canvasWidthHalf; _clearBox.min.y = - _clearBox.min.y + _canvasHeightHalf; // higher y value ! _clearBox.max.x = _clearBox.max.x + _canvasWidthHalf; _clearBox.max.y = - _clearBox.max.y + _canvasHeightHalf; // lower y value ! if ( _clearAlpha < 1 ) { _context.clearRect( _clearBox.min.x | 0, _clearBox.max.y | 0, ( _clearBox.max.x - _clearBox.min.x ) | 0, ( _clearBox.min.y - _clearBox.max.y ) | 0 ); } if ( _clearAlpha > 0 ) { setBlending( THREE.NormalBlending ); setOpacity( 1 ); setFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearAlpha + ')' ); _context.fillRect( _clearBox.min.x | 0, _clearBox.max.y | 0, ( _clearBox.max.x - _clearBox.min.x ) | 0, ( _clearBox.min.y - _clearBox.max.y ) | 0 ); } _clearBox.makeEmpty(); } }; // compatibility this.clearColor = function () {}; this.clearDepth = function () {}; this.clearStencil = function () {}; this.render = function ( scene, camera ) { if ( camera instanceof THREE.Camera === false ) { console.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' ); return; } var background = scene.background; if ( background && background.isColor ) { setFillStyle( 'rgb(' + Math.floor( background.r * 255 ) + ',' + Math.floor( background.g * 255 ) + ',' + Math.floor( background.b * 255 ) + ')' ); _context.fillRect( 0, 0, _canvasWidth, _canvasHeight ); } else if ( this.autoClear === true ) { this.clear(); } _this.info.render.vertices = 0; _this.info.render.faces = 0; _context.setTransform( _viewportWidth / _canvasWidth, 0, 0, - _viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY ); _context.translate( _canvasWidthHalf, _canvasHeightHalf ); _renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements ); _elements = _renderData.elements; _lights = _renderData.lights; _camera = camera; _normalViewMatrix.getNormalMatrix( camera.matrixWorldInverse ); /* DEBUG setFillStyle( 'rgba( 0, 255, 255, 0.5 )' ); _context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y ); */ calculateLights(); for ( var e = 0, el = _elements.length; e < el; e ++ ) { var element = _elements[ e ]; var material = element.material; if ( material === undefined || material.opacity === 0 ) continue; _elemBox.makeEmpty(); if ( element instanceof THREE.RenderableSprite ) { _v1 = element; _v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf; renderSprite( _v1, element, material ); } else if ( element instanceof THREE.RenderableLine ) { _v1 = element.v1; _v2 = element.v2; _v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf; _v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf; _elemBox.setFromPoints( [ _v1.positionScreen, _v2.positionScreen ] ); if ( _clipBox.intersectsBox( _elemBox ) === true ) { renderLine( _v1, _v2, element, material ); } } else if ( element instanceof THREE.RenderableFace ) { _v1 = element.v1; _v2 = element.v2; _v3 = element.v3; if ( _v1.positionScreen.z < - 1 || _v1.positionScreen.z > 1 ) continue; if ( _v2.positionScreen.z < - 1 || _v2.positionScreen.z > 1 ) continue; if ( _v3.positionScreen.z < - 1 || _v3.positionScreen.z > 1 ) continue; _v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf; _v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf; _v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf; if ( material.overdraw > 0 ) { expand( _v1.positionScreen, _v2.positionScreen, material.overdraw ); expand( _v2.positionScreen, _v3.positionScreen, material.overdraw ); expand( _v3.positionScreen, _v1.positionScreen, material.overdraw ); } _elemBox.setFromPoints( [ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen ] ); if ( _clipBox.intersectsBox( _elemBox ) === true ) { renderFace3( _v1, _v2, _v3, 0, 1, 2, element, material ); } } /* DEBUG setLineWidth( 1 ); setStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' ); _context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y ); */ _clearBox.union( _elemBox ); } /* DEBUG setLineWidth( 1 ); setStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' ); _context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y ); */ _context.setTransform( 1, 0, 0, 1, 0, 0 ); }; // function calculateLights() { _ambientLight.setRGB( 0, 0, 0 ); _directionalLights.setRGB( 0, 0, 0 ); _pointLights.setRGB( 0, 0, 0 ); for ( var l = 0, ll = _lights.length; l < ll; l ++ ) { var light = _lights[ l ]; var lightColor = light.color; if ( light instanceof THREE.AmbientLight ) { _ambientLight.add( lightColor ); } else if ( light instanceof THREE.DirectionalLight ) { // for sprites _directionalLights.add( lightColor ); } else if ( light instanceof THREE.PointLight ) { // for sprites _pointLights.add( lightColor ); } } } function calculateLight( position, normal, color ) { for ( var l = 0, ll = _lights.length; l < ll; l ++ ) { var light = _lights[ l ]; _lightColor.copy( light.color ); if ( light instanceof THREE.DirectionalLight ) { var lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld ).normalize(); var amount = normal.dot( lightPosition ); if ( amount"},{"title":"","date":"2020-11-29T04:44:26.457Z","updated":"2020-11-29T04:44:26.457Z","comments":true,"path":"lib/three/three.min.js","permalink":"http://example.com/lib/three/three.min.js","excerpt":"","text":"// threejs.org/license (function(l,pa){\"object\"===typeof exports&&\"undefined\"!==typeof module?pa(exports):\"function\"===typeof define&&define.amd?define([\"exports\"],pa):pa(l.THREE=l.THREE||{})})(this,function(l){function pa(){}function D(a,b){this.x=a||0;this.y=b||0}function ea(a,b,c,d,e,f,g,h,m,k){Object.defineProperty(this,\"id\",{value:Ze++});this.uuid=N.generateUUID();this.name=\"\";this.image=void 0!==a?a:ea.DEFAULT_IMAGE;this.mipmaps=[];this.mapping=void 0!==b?b:ea.DEFAULT_MAPPING;this.wrapS=void 0!==c?c:1001;this.wrapT= void 0!==d?d:1001;this.magFilter=void 0!==e?e:1006;this.minFilter=void 0!==f?f:1008;this.anisotropy=void 0!==m?m:1;this.format=void 0!==g?g:1023;this.type=void 0!==h?h:1009;this.offset=new D(0,0);this.repeat=new D(1,1);this.generateMipmaps=!0;this.premultiplyAlpha=!1;this.flipY=!0;this.unpackAlignment=4;this.encoding=void 0!==k?k:3E3;this.version=0;this.onUpdate=null}function fa(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1}function Ya(a,b,c){this.uuid=N.generateUUID();this.width= a;this.height=b;this.scissor=new fa(0,0,a,b);this.scissorTest=!1;this.viewport=new fa(0,0,a,b);c=c||{};void 0===c.minFilter&&(c.minFilter=1006);this.texture=new ea(void 0,void 0,c.wrapS,c.wrapT,c.magFilter,c.minFilter,c.format,c.type,c.anisotropy,c.encoding);this.depthBuffer=void 0!==c.depthBuffer?c.depthBuffer:!0;this.stencilBuffer=void 0!==c.stencilBuffer?c.stencilBuffer:!0;this.depthTexture=void 0!==c.depthTexture?c.depthTexture:null}function Gb(a,b,c){Ya.call(this,a,b,c);this.activeMipMapLevel= this.activeCubeFace=0}function ca(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._w=void 0!==d?d:1}function q(a,b,c){this.x=a||0;this.y=b||0;this.z=c||0}function S(){this.elements=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);0= d||0"}],"posts":[{"title":"hexo第一篇博客","slug":"hexo第一篇博客","date":"2020-11-29T01:19:25.000Z","updated":"2020-11-29T05:47:30.906Z","comments":true,"path":"2020/11/29/hexo第一篇博客/","link":"","permalink":"http://example.com/2020/11/29/hexo%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","excerpt":"Java语言都可以做些什么呢？ 阅读全文","text":"Java语言都可以做些什么呢？ 阅读全文1、学习培训Java能够建立网站 Java能够用于编写网站，如今许多商业网站都用Jsp写的，JSP全称Java Server Pages。它是一种动态网站技术性，例如大家了解的163，一些政府门户网站全是选用JSP撰写的。 因此学习培训Java的同学们能够找开发网站层面的工作中，并且如今找这些方面的职位比较多。 例如：网站建设，自然便是JSP+Servlet+JavaBean，一直以来都非常时兴。 2、学习培训Java能够做Android Android是一种根据Linux的随意及对外开放源码的电脑操作系统，其源码是Java。 因此销售市场上看到的手机的系统比如MIUI，阿里云服务器，乐蛙等，全是改动源码再发售的。 Java做安卓系统不仅仅是指系统软件，也有APP针对大量的开发者而言，她们大量的时间花在开发设计APP上边。 3、学习培训Java能做游戏 你可能不知道，在之前Nokia还很时兴的情况下，你玩的游戏有90%之上全是Java开发设计的。自然如今早已非常少人再去开发设计了，都转至安卓系统上来了。电脑也是有Java开发设计的手机游戏，最經典的是：《我的世界》(minecraft，通称MC)，当今社会最具人气值和知名度的网游之一《英雄联盟》(通称lol)。 4、学习培训Java能够软件开发 一般计算机语言都能够软件开发的，Java都不列外，比如Eclipse，MyEclipse等著名Java开发环境。相关软件开发部件，能够掌握Java Swing程序编写或是awt有关专业知识。 例如：企业级应用开发设计，这儿是JAVA的乾坤，大到全国通的系统软件，小到中小型企业的运用解决方法，Java都占据极其重要的影响力。 此外也有挪动行业，典型性的运用是游戏(中国主要是这些方面)，这儿是J2ME的乾坤，实际上运用范畴是很广的。Java已变成现如今目前市面上最火爆的数控编程软件，针对处在信息内容髙速比较发达的今日，Java技术性早已无所不在，手机app、手机上JAVA手机游戏、电脑应用这些。 5、内嵌式：WriteOnce,RunAnywhere。内嵌式行业好像为Java量身定做打造出。 6、互联网大数据：Hadoop及其别的大数据处理技术性许多 全是用Java。 7、科学研究运用：Java的安全系数、便携式让Java在科学研究运用、金融信息服务、室内空间极大。 以上，未来java语言依旧是主角，本文分享给大家一个从小白大神的java学习资料希望对大家有帮助。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-11-29T01:13:23.060Z","updated":"2020-11-29T01:13:23.061Z","comments":true,"path":"2020/11/29/hello-world/","link":"","permalink":"http://example.com/2020/11/29/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}